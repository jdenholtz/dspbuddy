<br />
<% if current_user.id == @datum.dataset.user_id || @datum.dataset.share? %>
  <div class="container-fluid">

    <div class="row">
      
      <div class="col text-center">
          <h1 class="text-center inset-box"><%= @datum.dataset.title %>: <%=@datum.name%></h1>
        <div id="chart" class="svg-container">
        </div>
        <button id="normBtn" class="btn btn-sm raised-box">Normalize Data</button>
      </div>

      <br />
      <br />
      <br />

      <div class="col">
        <div class="edge-row">
          <h1 class="text-center inset-box">Statistics</h1>
        </div>
        <div class="stats-box">    
          <div class="row edge-row">
            <div class="col-6 padding-0">
              <h3 class="inset-box" id="maxBtn">Max</h3>
              <h3 class="inset-box" id="minBtn">Min</h3>
              <h3 class="inset-box" id="meanBtn">Mean</h3>
              <h3 class="inset-box" id="medianBtn">Median</h3>
              <h3 class="inset-box" id="varianceBtn">Variance</h3>
              <h3 class="inset-box" id="deviationBtn">Deviation</h3>
            </div>  
            <div class="col-6 padding-0">
              <h3 class="inset-box" id="max">max</h3>
              <h3 class="inset-box" id="min">min</h3>
              <h3 class="inset-box" id="mean">meab</h3>
              <h3 class="inset-box" id="median">median</h3>
              <h3 class="inset-box" id="variance">variance</h3>
              <h3 class="inset-box" id="deviation">deviation</h3>
            </div>
          </div> 
        </div>
      </div>
    </div>
  </div>

<% else %>
  <br />
  <br />
  <div class="text-center inset-box col-10 offset-1">
    <br />
    <h1>This is Private Data</h1>
    <br />
  </div>
<% end %>



<script>

d3.select("svg").remove();

var yBreakPoint = 550;
var xBreakPoint = 300;


var Chart = (function(window,d3) {
  var data = <%=raw @plotData %>;
  var dataSps = <%=raw @mysps.to_i %>;
  var svg, x, y, xAxis, yAxis, dim, chartWrapper, line, path, yTitlePos, margin = {}, width, height;
  var max, min, mean, median, variance, deviation, maxLine, minLine, meanLine, medianLine, varianceLine, deviationLine, maxPath, minPath, meanPath, medianPath, variancePath, deviationPath;
  var origonalMean = d3.mean(data);
  var maxToggle = false;
  var minToggle = false;
  var meanToggle = false;
  var medianToggle = false;
  var varianceToggle = false;
  var deviationToggle = false;
  var normalizeToggle = false;

  
  // adds last tick to x axis by extending data to next second
  //var secondsOfData = data.length / dataSps;
  //var secondsToDisplayOnAxis = Math.ceil(secondsOfData);
  //var secondsToAdd = secondsToDisplayOnAxis - secondsOfData;
  //var samplesToAdd = secondsToAdd * dataSps;
  //var totalSamples = data.length + samplesToAdd;

  var totalSamples = data.length + (Math.ceil(data.length / dataSps) - (data.length / dataSps)) * dataSps;
  //console.log(secondsOfData);
  //console.log(secondsToDisplayOnAxis);
  //console.log(secondsToAdd);
  //console.log(samplesToAdd);
  //console.log(totalSamples);

  //  Set array of acurate timesignatures for data
  var timeStamp = [];
  for (var i = 0; i <= totalSamples; i++) {
    timeStamp.push(i/dataSps);
  }
  
  getAndFillStatistics();
  
  //Initial setup of data
  init();
  //called once the data is loaded
  function init() {
    //initialize scales
    xExtent = d3.extent(timeStamp, function(d,i) { return d });
    yExtent = d3.extent(data, function(d,i) { return (d)});
    console.log(yExtent);

    var range = Math.abs(yExtent[1]-yExtent[0]) * 0.025;
    console.log(range);
    yExtent[0] = yExtent[0] - range;
    yExtent[1] = yExtent[1] + range;
    console.log(yExtent);
    x = d3.scaleLinear().domain(xExtent);
    y = d3.scaleLinear().domain(yExtent);

    //initialize axis
    xAxis = d3.axisBottom(x);
    yAxis = d3.axisLeft(y);

    //the path generator for the line chart and stat lines
    line = d3.line()
      .x(function(d,i) { return x(timeStamp[i])})
      .y(function(d,i) { return y(data[i]) });

    if(maxToggle === true) {
      maxLine = d3.line()
        .x(function(d,i) { return x(timeStamp[i])})
        .y(function(d,i) { return y(max)});
    }

    if(minToggle === true) {
      minLine = d3.line()
        .x(function(d,i) { return x(timeStamp[i])})
        .y(function(d,i) { return y(min)});
    }
    
    if(meanToggle === true) {
      meanLine = d3.line()
        .x(function(d,i) { return x(timeStamp[i])})
        .y(function(d,i) { return y(mean)});
    }
    
    if(medianToggle === true) {
      medianLine = d3.line()
        .x(function(d,i) { return x(timeStamp[i])})
        .y(function(d,i) { return y(median)});
    }

    if(varianceToggle === true) {
      varianceLine = d3.line()
        .x(function(d,i) { return x(timeStamp[i])})
        .y(function(d,i) { return y(variance)});
    }

    if(deviationToggle === true) {
      deviationLine = d3.line()
        .x(function(d,i) { return x(timeStamp[i])})
        .y(function(d,i) { return y(deviation)});
    }

    //initialize svg
    svg = d3.select('#chart').append('svg').classed('shadow-box', true);
    chartWrapper = svg.append('g');
    path = chartWrapper.append('path').datum(data).classed('line', true);

    //stat togglers attsches lines to svg
    if(maxToggle === true){
        maxPath = chartWrapper.append('path').datum(data).classed('max-line', true);
    }

    if(minToggle === true){
        minPath = chartWrapper.append('path').datum(data).classed('min-line', true);
    }

    if(meanToggle === true){
        meanPath = chartWrapper.append('path').datum(data).classed('mean-line', true);
    }

    if(medianToggle === true){
        medianPath = chartWrapper.append('path').datum(data).classed('median-line', true);
    }

    if(varianceToggle === true){
        variancePath = chartWrapper.append('path').datum(data).classed('variance-line', true);
    }

    if(deviationToggle === true){
        deviationPath = chartWrapper.append('path').datum(data).classed('deviation-line', true);
    }

    chartWrapper.append('g').classed('x axis', true);
    chartWrapper.append('g').classed('y axis', true);
    chartWrapper.append('text').classed('y-label', true);
    chartWrapper.append("text").classed('x-label', true); 
    //render the chart
    render();
  }

  //renders the svg
  function render() {

    //get dimensions based on window size
    updateDimensions(window.innerWidth * 0.9);
    
    //update x and y scales to new dimensions
    x.range([0, width]);
    y.range([height * 0.5, 0]);

    //update svg elements to new dimensions
    svg
      .attr('width', width + margin.right + margin.left)
      .attr('height', height * 0.5 + margin.top + margin.bottom);
    chartWrapper.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'); 

    //update the axis and line
    xAxis.scale(x);
    yAxis.scale(y);

    //add axis lables with position based on window size
    chartWrapper.select('.y-label')
      .attr("y", -34)
      .attr("x", -yTitlePos)
      .attr("text-anchor", "middle")
      .attr("transform", "rotate(-90)")
      .text("Voltage (V)");
    chartWrapper.select('.x-label')
      .attr("y", xTitleVert)
      .attr("x", xTitleHor)
      .text("Time (s)");
      
    //removes every other axis tick for small window
    if(window.innerWidth < xBreakPoint) {
       xAxis.ticks(5)
    }
    else {
      xAxis.ticks(11)
    }
    if(window.innerWidth < yBreakPoint) {
       yAxis.ticks(4)
    }
    else {
      yAxis.ticks(9)
    }

    //adds axis with correct number of ticks
    svg.select('.x.axis')
      .attr('transform', 'translate(0,' + height * 0.5 + ')')
      .call(xAxis);
    svg.select('.y.axis')
      .call(yAxis);
 

    //adds line for data
    path.attr('d', line);
    //adds lines for stats
    if(maxToggle === true){
      maxPath.attr('d', maxLine);
    }
    if(minToggle === true){
      minPath.attr('d', minLine);
    }

    if(meanToggle === true){
      meanPath.attr('d', meanLine);
    }

    if(medianToggle === true){
      medianPath.attr('d', medianLine);
    }

    if(varianceToggle === true){
      variancePath.attr('d', varianceLine);
    }

    if(deviationToggle === true){
      deviationPath.attr('d', deviationLine);
    }
  }

  //sets graph dimensions based on window width
  function updateDimensions(winWidth) {
    margin.top = 20;
    margin.right = 20;
    margin.left = 50;
    margin.bottom = 50;

    width = (winWidth - margin.left - margin.right) * 0.75;
    height = .7 * width; //aspect ratio is 0.7
    
    //sets axis lables with relitave coordinates fixing in place
    yTitlePos = 0.267 * height + 0.6424;
    xTitleVert = 0.3475 * width + 38.57;
    xTitleHor = 0.4847 * width - 22.552;
    // console.log(width);
    
    //control spacing on window resize
    $(".stats-box").css("height", (height * 0.5 + 70));

    if( width < 393) {
      $(".stats-box").css("width", (width + 70));
      $(".stats-box").css("margin", "auto");
      $(".stats-table").css("width", (width + 70));
      $("h3").css("padding-top", 6);
      $("h3").css("padding-top", 6);
    }
    else {
      $(".stats-box").css("width", 'auto');
      $(".stats-table").css("width", '100%');
      $("h3").css("padding-top", 0.0283 * width - 7.1666);
      $("h3").css("padding-bottom", 0.0283 * width - 7.1666);
    }
  }
  //normalizes the data
  function toggleNorm() {
    if(normalizeToggle === false){
      for (var i = 0; i < data.length; i++) {
        data[i] -= origonalMean;
      }
      normalizeToggle = true;
      $("#normBtn").css("box-shadow", '0 0 20px 4px #722B3E');
    }
    else {
     for (var i = 0; i < data.length; i++) {
        data[i] += origonalMean;
      } 
      normalizeToggle = false;
      $("#normBtn").css("box-shadow", '0 0 15px black');
    }
    getAndFillStatistics();
    d3.select("svg").remove();
    init();
    
  }
  //calculates statistics and adds them to the page
  function getAndFillStatistics() {
    calculateStatistics();
    $("#max").html(max.toFixed(4));
    $("#min").html(min.toFixed(4));
    $("#mean").html(mean.toFixed(4));
    $("#median").html(median.toFixed(4));
    $("#variance").html(variance.toFixed(4));
    $("#deviation").html(deviation.toFixed(4));
  }

  function calculateStatistics(){
    max = d3.max(data);
    min = d3.min(data);
    mean = d3.mean(data);
    median = d3.median(data);
    variance = d3.variance(data);
    deviation = d3.deviation(data);
  }

  //toggle functions add and remove the stat lines from the chart
  function toggleMax() {
      if(maxToggle === false){
        maxToggle = true;
        $("#maxBtn").css("box-shadow", '0 0 10px #FF6EFF inset');
        $("#max").css("box-shadow", '0 0 10px #FF6EFF inset');
        d3.select("svg").remove();
        init();
      }
      else {
        maxToggle = false;
        $("#maxBtn").css("box-shadow", '0 0 15px #2a2a2a inset');
        $("#max").css("box-shadow", '0 0 15px #2a2a2a inset');
        d3.select(".max-line").remove();
      }
  }

  function toggleMin() {
      if(minToggle === false){
        minToggle = true;
        $("#minBtn").css("box-shadow", '0 0 10px #50BFE6 inset');
        $("#min").css("box-shadow", '0 0 10px #50BFE6 inset');
        d3.select("svg").remove();
        init();
      }
      else {
        minToggle = false;
        $("#minBtn").css("box-shadow", '0 0 15px #2a2a2a inset');
        $("#min").css("box-shadow", '0 0 15px #2a2a2a inset');
        d3.select(".min-line").remove();
      }
      
  }

  function toggleMean() {
      if(meanToggle === false){
        meanToggle = true;
        $("#meanBtn").css("box-shadow", '0 0 10px #FD5B78 inset');
        $("#mean").css("box-shadow", '0 0 10px #FD5B78 inset');
        d3.select("svg").remove();
        init();
      }
      else {
        meanToggle = false;
        $("#meanBtn").css("box-shadow", '0 0 15px #2a2a2a inset');
        $("#mean").css("box-shadow", '0 0 15px #2a2a2a inset');
        d3.select(".mean-line").remove();
      }

  }

  function toggleMedian() {
      if(medianToggle === false){
        medianToggle = true;
        $("#medianBtn").css("box-shadow", '0 0 10px #FF6037 inset');
        $("#median").css("box-shadow", '0 0 10px #FF6037 inset');
        d3.select("svg").remove();
        init();
      }
      else {
        medianToggle = false;
        $("#medianBtn").css("box-shadow", '0 0 15px #2a2a2a inset');
        $("#median").css("box-shadow", '0 0 15px #2a2a2a inset');
        d3.select(".median-line").remove();
      }
      
  }

  function toggleVariance() {
      if(varianceToggle === false){
        varianceToggle = true;
        $("#varianceBtn").css("box-shadow", '0 0 10px #66FF66 inset');
        $("#variance").css("box-shadow", '0 0 10px #66FF66 inset');
        d3.select("svg").remove();
        init();
      }
      else {
        varianceToggle = false;
        $("#varianceBtn").css("box-shadow", '0 0 15px #2a2a2a inset');
        $("#variance").css("box-shadow", '0 0 15px #2a2a2a inset');
        d3.select(".variance-line").remove();
      }

  }

  function toggleDeviation() {
      if(deviationToggle === false){
        deviationToggle = true;
        $("#deviationBtn").css("box-shadow", '0 0 10px #FFFF66 inset');
        $("#deviation").css("box-shadow", '0 0 10px #FFFF66 inset');
        d3.select("svg").remove();
        init();
      }
      else {
        deviationToggle = false;
        $("#deviationBtn").css("box-shadow", '0 0 15px #2a2a2a inset');
        $("#deviation").css("box-shadow", '0 0 15px #2a2a2a inset');
        d3.select(".deviation-line").remove();
      }
      
  }

  //interactive elements
  document.getElementById("normBtn").addEventListener("click", toggleNorm, false);
  document.getElementById("maxBtn").addEventListener("click", toggleMax, false);
  document.getElementById("minBtn").addEventListener("click", toggleMin, false);
  document.getElementById("meanBtn").addEventListener("click", toggleMean, false);
  document.getElementById("medianBtn").addEventListener("click", toggleMedian, false);
  document.getElementById("varianceBtn").addEventListener("click", toggleVariance, false);
  document.getElementById("deviationBtn").addEventListener("click", toggleDeviation, false);

  return {
    render : render
  }

})(window,d3);

window.addEventListener('resize', Chart.render);
</script>

